-- Display all FIRST_NAME that has letter a in second character
--- '_a%'
SELECT FIRST_NAME
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '_a%';

--------- SQL JOIN --------
--- IS USED TO GET DATA FROM 2 OR MORE TABLES THAT RELATED TO EACH OTEHR
-- PRIMARY KEY AND FOREIGN KEY RELATIONSHIP

--- INNER JOIN , LEFT OUTER JOIN , RIGHT OUTER JOIN , FULL OUTER JOIN


--In order to join two tables or more that has relationship
--select desired columns from both tables
--from table 1
--INNER JOIN table 2 on the common column

SELECT COUNTRIES.COUNTRY_NAME, REGIONS.REGION_NAME
FROM COUNTRIES
         INNER JOIN REGIONS ON COUNTRIES.REGION_ID = REGIONS.REGION_ID;

-- we can use alias for table to make above query slightly more readable
-- nickname are followed by space and the letter or word
--you can use to select the column
--just like you did in java obj.variableName
SELECT c.COUNTRY_NAME, r.REGION_NAME
FROM COUNTRIES c
         INNER JOIN REGIONS r ON c.REGION_ID = r.REGION_ID;

-- FIND OUT CITY (LOCATION) AND COUNTRY_NAME(COUNTRIES)
SELECT LOCATIONS.CITY, COUNTRIES.COUNTRY_NAME
FROM LOCATIONS
         INNER JOIN COUNTRIES ON LOCATIONS.COUNTRY_ID = COUNTRIES.COUNTRY_ID;

SELECT l.CITY, c.COUNTRY_NAME
FROM LOCATIONS l
         INNER JOIN COUNTRIES c ON l.COUNTRY_ID = c.COUNTRY_ID;

--It does not matter which table comes first
--when you do INNER JOIN
SELECT l.CITY, c.COUNTRY_NAME
FROM COUNTRIES c
         INNER JOIN LOCATIONS l ON l.COUNTRY_ID = c.COUNTRY_ID;

-- Display DEPARTMENT_NAME THAT COMING FROM (DEPARTMENTS) AND CITY(LOCATIONS)

SELECT l.CITY, d.DEPARTMENT_NAME
FROM DEPARTMENTS d
         INNER JOIN LOCATIONS l ON d.LOCATION_ID = l.LOCATION_ID;

-- DISPLAY FIRST_NAME (EMPLOYEES) , DEPARTMENT_NAME (DEPARTMENTS)
-- THEY ARE RELATED BY DEPARTMENT_ID
SELECT e.FIRST_NAME, d.DEPARTMENT_NAME
FROM EMPLOYEES e
         INNER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;

-- WE WANT TO DISPLAY FIRST_NAME, DEPARTMENT_NAME
--- INCLUDING THOSE WHO HAS NULL DEPARTMENT LIKE KIMBERLY
SELECT e.FIRST_NAME, d.DEPARTMENT_NAME
FROM EMPLOYEES e
         LEFT OUTER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;

-- WE WANT TO DISPLAY FIRST_NAME, DEPARTMENT_NAME
--- INCLUDING THOSE DEPARTMENTS THAT DOES NOT HAVE ANY MATCHING EMPLOYEES
SELECT e.FIRST_NAME, d.DEPARTMENT_NAME
FROM EMPLOYEES e
         RIGHT OUTER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;

-- WE WANT TO DISPLAY FIRST_NAME, DEPARTMENT_NAME
--- INCLUDING THOSE DEPARTMENTS THAT DOES NOT HAVE ANY MATCHING EMPLOYEES
--INCLUDING THOSE DEPARTMENT THAT DOES NOT HAVE ANY MATCHING EMPLOYEES
SELECT e.FIRST_NAME, d.DEPARTMENT_NAME
FROM EMPLOYEES e
         FULL OUTER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;

--DISPLAY ALL DEPARTMENT_NAME (DEPARTMENTS) AND CITY (LOCATIONS)
-- INCLUDING THOSE CITY WITH NO DEPARTMENT IN IT
SELECT d.DEPARTMENT_NAME, l.CITY
FROM DEPARTMENTS d
         RIGHT OUTER JOIN LOCATIONS l ON d.LOCATION_ID = l.LOCATION_ID;

--DISPLAY FIRST_NAME AND JOB_TITLE
SELECT e.FIRST_NAME, j.JOB_TITLE
FROM EMPLOYEES e
         INNER JOIN JOBS j ON e.JOB_ID = j.JOB_ID;

--DISPLAY FIRST_NAME  (EMPLOYEES) AND JOB_TITLE (JOBS), DEPARTMENT_NAME(DEPARTMENTS)
SELECT e.FIRST_NAME, j.JOB_TITLE, d.DEPARTMENT_NAME
FROM EMPLOYEES e
         INNER JOIN JOBS j ON e.JOB_ID = j.JOB_ID
         INNER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;

--DISPLAY CITY, COUNTRY_NAME, REGION_NAME
SELECT c.COUNTRY_NAME, l.CITY, r.REGION_NAME
FROM COUNTRIES c
INNER JOIN LOCATIONS l ON c.COUNTRY_ID = l.COUNTRY_ID
INNER JOIN REGIONS r ON c.REGION_ID = r.REGION_ID;

-- THEY ARE RELATED BY DEPARTMENT_ID
SELECT d.DEPARTMENT_NAME, COUNT(e.FIRST_NAME)
FROM EMPLOYEES e
         INNER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
GROUP BY d.DEPARTMENT_NAME;

