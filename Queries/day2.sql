--WHAT ABOUT THE PARTIAL SEARCH
--WE USE LIKE AND % (WILD CARD)
--% can represent 0 or more character of any kind
--_can represent exactly one character of any kind

/*
        'D%' -> anything that starts with D
        David, Danny, Dog
        '%d' -> anything that ends with d
        Sid, Bid, Kid, Dad
        '%d%' -> anything that contains 1 or more letter d
        Aladdin, Cassandra, Adam

        'D%a" -> anything starts with D and end with a
        Daniela, Donna, Damla
        'S%e%n' -> anything starts with S ends with n and contains e
        Steven, Stephen, Selen

        'T_' -> Starts with T and followed by
        exactly on character of any kind
        Tj, TD, Ta, Ta

        '_a_' -> starts with any one character,
        followed by a and followed by any one character
        Dad, Man, Fat, Tab, Gap
 */
SELECT FIRST_NAME FROM EMPLOYEES
--WHERE FIRST_NAME LIKE 'D%'; --9
--WHERE FIRST_NAME LIKE '%d'; --6
--WHERE FIRST_NAME LIKE '%d%'; --15
--WHERE FIRST_NAME LIKE 'D%a'; --1
--WHERE FIRST_NAME LIKE 'S%e%n'; --3
--WHERE FIRST_NAME LIKE 'T_'; --1
--WHERE FIRST_NAME LIKE '_a_'; --1
WHERE FIRST_NAME LIKE 'Da%';

SELECT PHONE_NUMBER FROM EMPLOYEES
WHERE PHONE_NUMBER LIKE '515%'; --21 STARTS WITH 515

SELECT PHONE_NUMBER FROM EMPLOYEES
WHERE PHONE_NUMBER LIKE '%.121.%'; --8 CONTAINS 121 in the middle

--You can optionally give an ALIAS (NICKNAME) for your
--column to change the reuslting column name (only on display not database)
--using the keyword as right after column name
--
--Display all first name , salary in employees table
-- modify the column name for salary in result to money

SELECT FIRST_NAME, SALARY AS MONEY
FROM EMPLOYEES;

--Display all first name , Last name in employees table
-- modify the column name for as below
--First_Name -> GIVEN_NAME  LAST_NAME --> FAMILY_NAME
SELECT FIRST_NAME AS GIVEN_NAME , LAST_NAME AS FAMILY_NAME
FROM EMPLOYEES;

--Display all first name , Last name in employees table
-- modify the column name for as below
--First_Name -> GIVEN NAME  LAST_NAME --> FAMILY NAME
SELECT FIRST_NAME AS "GIVEN NAME" , LAST_NAME AS "FAMILY NAME"
FROM EMPLOYEES;

--CONCATENATION IN SQL USE DOUBLE PIPE || (THIS IS NOT OR)
--DISPLAY FIRST NAME, LAST NAME, AND FULL NAME FOR EMPLOYEE
SELECT FIRST_NAME, LAST_NAME,
       FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME --Concatenate full name
FROM EMPLOYEES;

--ARITHMETIC OPERATION : + - * /
--Display FIRST name and salary and
-- increased salary after $5000 raise

SELECT FIRST_NAME, SALARY,
       SALARY + 5000 AS "INCREASED SALARY"
FROM EMPLOYEES;

-- AND decreased salary after $2000 cut

SELECT FIRST_NAME, SALARY,
       SALARY - 2000 AS "decreased salary"
FROM EMPLOYEES;

--and yearly salary = multiply by 12

SELECT FIRST_NAME, SALARY,
       SALARY * 12 AS "YEARLY SALARY"
FROM EMPLOYEES;

--and weekly salary = divide by 4

SELECT FIRST_NAME, SALARY,
       SALARY / 4 AS "HOURLY SALARY"
FROM EMPLOYEES;

--ALL TOGETHER IN ONE SCHEDULE

SELECT FIRST_NAME, SALARY,
       SALARY + 5000 AS "INCREASED_SALARY",
       SALARY - 2000 AS "DECREASED_SALARY",
       SALARY * 12 AS "YEARLY_SALARY",
       SALARY / 4 AS "HOURLY_SALARY"

FROM EMPLOYEES;

-- SQL BUILT-IN FUNCTIONS:
-- REUSABLE CODE THAT WRAPPED INTO FUNCTION FOR COMMON TASKS
-- LIKE ROUNDING NUMBERS, GETTING LENGTH OF STR AND MORE,
--SINGLE ROW FUNCTION
    --IT AFFECT EACH AND EVERY ROW AND RETURN SAME NUMBER OF ROW

    --FEW TEXT FUNCTIONS:
    -- UPPER, ACCEPT ONE PARAMETER (COLUMN NAME) AND RETURN UPPERCASE
    -- LOWER, ACCEPT ONE PARAMETER (COLUMN NAME) AND RETURN LOWERCASE
    -- LENGTH, ACCEPT ONE PARAMETER (COLUMN NAME) AND RETURN LENGTH OF THE WORD

--DISPLAY FRIST_NAME, AND UPPERCASE FIRST_NAME IN EMPLOYEE TABLE
SELECT FIRST_NAME,
       UPPER(FIRST_NAME) AS UPPERCASE_NAME,
       LOWER(FIRST_NAME) AS LOWERCASE_NAME,
       length(FIRST_NAME) AS CHAR_COUNT
FROM EMPLOYEES;

-- FIND OUT ALL FIRST NAME AND CHARACTER COUNT
-- ONLY DISPLAY IF CHARACTER COUNT IS EXACTLY 5
SELECT FIRST_NAME, LENGTH(FIRST_NAME)
FROM EMPLOYEES
WHERE LENGTH(FIRST_NAME) = 5;

--DISPLAY FIRST_NAME IF CHARACTER COUNT IS MORE THAN 10
SELECT FIRST_NAME, LENGTH(FIRST_NAME)
FROM EMPLOYEES
WHERE LENGTH(FIRST_NAME) > 10;

--DISPLAY IF CHARACTER COUNT IS BETWEEN 7-9
SELECT FIRST_NAME, LENGTH(FIRST_NAME)
FROM EMPLOYEES
WHERE LENGTH(FIRST_NAME) BETWEEN 7 AND 9;

--DISPLAY IF CHARACTER COUNT IS NOT BETWEEN 5-10
SELECT FIRST_NAME, LENGTH(FIRST_NAME)
FROM EMPLOYEES
WHERE LENGTH(FIRST_NAME) NOT BETWEEN 5 AND 10;

--DISPLAY IF CHARACTER COUNT IS EXACTLY 2 OR 9 0R 11
SELECT FIRST_NAME, LENGTH(FIRST_NAME)
FROM EMPLOYEES
WHERE LENGTH(FIRST_NAME) IN (2,9,11);
/*
WHERE LENGTH(FIRST_NAME) = 2
   OR LENGTH(FIRST_NAME) = 9
   OR LENGTH(FIRST_NAME) = 11;
 */

 --FIND OUT ALL FIRST_NAME THAT CONTAINS d OR D
SELECT FIRST_NAME, UPPER(FIRST_NAME)
FROM EMPLOYEES
WHERE UPPER(FIRST_NAME) LIKE '%D%';
/*
SELECT FIRST_NAME, UPPER(FIRST_NAME)
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '%D%'
OR FIRST_NAME LIKE '%d%';
 */

 -- NUMBER FUNCTIONS:
 -- ROUND(DECIMAL NUMBER HERE) --> ROUNDED NUMBER
-- ROUND (DECIMAL NUMBER HERE, DIGIT YOU WANNA KEEP)
-- -->> ROUNDED NUMBER WITH DESIRED DIGIT

--FIND OUT SALARY AND DAILY SALARY OF EMPLOYEE
SELECT SALARY,
       ROUND(SALARY/30),
       ROUND(SALARY/30 , 2)
FROM EMPLOYEES;

--you can use single row anywhere
--including in select column list, condition , order by
SELECT FIRST_NAME
FROM EMPLOYEES
ORDER BY LENGTH(FIRST_NAME) DESC ;

--Multi Row Functions | Group Functions | Aggregate Functions
-- COUNT , MAX , MIN , SUM , AVG

--you can use COUNT function either with * or column name
--when used with * it will just return the row count
--when used with column name it will return non-null row count only
SELECT COUNT(*) , COUNT(FIRST_NAME)
FROM EMPLOYEES;

--we have only 35 employees with commission_pct value not null
--so the result will be 35
SELECT COUNT(COMMISSION_PCT)
FROM EMPLOYEES;

--GET THE EMPLOYEE COUNT FOR EMPLOYEES WITH DEPARTMENT_ID IS 90
SELECT COUNT(*)
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 90;

--MAX
--FIND OUT THE MAX SALARY IN EMPLOYEES TABLE
SELECT MAX(SALARY)
FROM EMPLOYEES; --24000

--FIND OUT THE MAX SALARY IN EMPLOYEES TABLE
--EXCLUDE THE SALARY 24000
SELECT MAX(SALARY)
FROM EMPLOYEES
WHERE SALARY != 24000; --17000

--MIN
--FIND OUT THE MIN SALARY IN EMPLOYEES TABLE
SELECT MIN(SALARY)
FROM EMPLOYEES; --2100

--FIND OUT THE MIN SALARY IN EMPLOYEES TABLE
--EXCLUDE THE SALARY 2100
SELECT MIN(SALARY)
FROM EMPLOYEES
WHERE SALARY <> 2100; --2200

--SUM
-- GET THE SUM OF ENTIRE EMPLOYEES SALARY
SELECT SUM(SALARY)
FROM EMPLOYEES;

-- GET THE SUM OF ENTIRE EMPLOYEES SALARY FOR DEPARTMENT_ID 90
SELECT SUM(SALARY)
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 90;

--AVG
--FIND OUT AVERAGE SALARY FOR ALL EMPLOYEES
SELECT AVG(SALARY) , ROUND(AVG(SALARY))
FROM EMPLOYEES;

SELECT COUNT(*) AS "EMPLOYEE COUNT",
       MAX(SALARY) AS "HIGHEST SALARY",
       MIN(SALARY) AS "LOWEST SALARY",
       SUM(SALARY) AS "SUM OF ALL SALARY",
       AVG(SALARY) AS "AVERAGE SALARY"
FROM EMPLOYEES;

--GROUP BY
--CAN BE USED ALONG WITH MULTI-ROW(AGGREGATE, GROUP) FUNCTIONS
--TO GENERATE RESULT PER GROUP INSTEAD OF WHOLE TABLE
--IT CAN ONLY BE USED ALONG

SELECT MAX(SALARY)
FROM EMPLOYEES;

--DISPLAY COUNT OF EMPLOYEES IN EACH DEPARTMENT

SELECT DEPARTMENT_ID,
       COUNT(*) AS "DEP_EMP_COUNT"
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;

--DISPLAY COUNT OF EMPLOYEES IN EACH JOB_ID
SELECT JOB_ID,
       COUNT(*) AS "JOB_ID_COUNT"
FROM EMPLOYEES
GROUP BY JOB_ID;

--DISPLAY THE MAX SALARY OF EACH DEPARTMENT_ID
--DISPLAY THE SUM SALARY OF EACH DEPARTMENT
--DISPLAY THE AVG SALARY OF EACH DEPARTMENT_ID
SELECT DEPARTMENT_ID,
       MAX(SALARY) AS HIGHEST_SALARY,
       SUM (SALARY) AS TOTAL_SALARY,
       ROUND(AVG(SALARY)) AS AVG_SALARY
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;

--DISPLAY MIN SALARY FOR EACH JOB ID
--DISPLAY MIN SALARY FOR EACH JOB ID

--USING COUNTRIES TABLE
--DISPLAY COUNT OF COUNTRIES IN EACH REGION

SELECT REGION_ID,
       COUNT(*) AS COUNTRIES_COUNT
FROM COUNTRIES
GROUP BY REGION_ID;

--HAVING
--CAN BE USED AFTER GROUP BY to filter
--already combined result further more
--you can only use having if you are using
--aggregate functions in condition after group by
--FOR EXAMPLE IF COUNT OF EMPLOYEES IN EACH DEPARTMENT MORE THAN 10
--HAVING COUNT(*)>10 WORKS, WHERE COUNT(*) WILL NEVER WORK

--DISPLAY COUNT OF EMPLOYEES IN EACH DEPARTMENT
--ONLY DISPLAY IF THE COUNT OF EMPLOYEES ARE MORE THAN 10
SELECT DEPARTMENT_ID,
       COUNT(*) AS "DEP_EMP_COUNT"
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING COUNT(*) > 10;

--DISPLAY MAX SALARY IN EACH DEPARTMENT
--ONLY DISPLAY IF THE DEPARTMENT MAX SALARY IS MORE THAN 10000
SELECT DEPARTMENT_ID, MAX(SALARY)
FROM EMPLOYEES
--WHERE MAX(SALARY) --> THIS DOES NOT WORK WITH AGGREGATE FUNCTIONS
--SUCH AS MAX, MIN, COUNT, SUN
GROUP BY DEPARTMENT_ID
HAVING MAX(SALARY) > 10000;

--DISPLAY MAX SALARY IN EACH DEPARTMENT
---ONLY DISPLAY IF DEPARTMENT ID IS NOT 100
SELECT DEPARTMENT_ID,
       MAX(SALARY)
FROM EMPLOYEES
--WHERE DEPARTMENT_ID != 100
GROUP BY DEPARTMENT_ID
HAVING DEPARTMENT_ID != 100;